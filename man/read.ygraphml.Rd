% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R
\docType{methods}
\name{read.ygraphml}
\alias{read.ygraphml}
\alias{read.ygraphml,CellTrailsSet-method}
\title{Import trajectory graph layout}
\usage{
read.ygraphml(ctset, file, adjust = TRUE)
}
\arguments{
\item{ctset}{A \code{\link[CellTrails]{CellTrailsSet}} object}

\item{file}{A character string naming a file}

\item{adjust}{Indicates if layout has to be adjusted such that edge lengths
correlated to pseudotime. (default: TRUE)}
}
\value{
An updated \code{\link[CellTrails]{CellTrailsSet}} object
}
\description{
Reads ygraphml file containing the trajectory graph's layout
}
\details{
To visualize the trajectory graph, a proper graph layout has to be computed.
Ideally, edges should not cross and nodes should not overlap. CellTrails enables the
export and import of the trajectory graph structure using the graphml file format.
This file format can be interpreted by most third-party graph analysis applications,
allowing the user to subject the trajectory graph to a wide range of
layout algorithms. Please note that the graphml file needs to contain layout information
("<y:Geometry x=... y=... >" entries) as provided by the 'ygraphml' file definition
used by the Graph Visualization Software 'yEd' (freely available from yWorks GmbH,
http://www.yworks.com/products/yed). \cr \cr
CellTrails implements a module which can incorporate pseudotime information into the the graph
layout (activated via parameter \code{adjust}). Here, edge lengths between two nodes (samples)
will then correspond to the inferred pseudotime that separates two samples along the trajectory.
}
\examples{
# Generate example data
dat <- exDat()

\dontrun{
# Create container
ctset <- as.CellTrailsSet(dat)

# Embed samples
ctset <- embedSamples(ctset)

# Find spectrum
spectr <- findSpectrum(ctset, frac=25)

# Reduce dimensionality
ctset <- reduceDimensions(ctset, spectr)

# Find states
ctset <- findStates(ctset, max_pval=1e-3, min_feat=4)

# Connect states
ctset <- connectStates(ctset, l=20)

# Select trajectory
ctset <- selectTrajectory(ctset, component=1)

ctset <- fitTrajectory(ctset) # Align samples to trajectory

# Then: export trajectory graph structure
# for layout computation in yEd (see vignette)
# and reimport to the R environment
write.ygraphml(ctset, file="yourFilePath")
ctset <- read.ygraphml(ctset, file="yourFilePath")
}
}
\seealso{
\code{\link[CellTrails]{write.ygraphml}}
}
\author{
Daniel C. Ellwanger
}
